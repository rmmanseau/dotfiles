#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.

use strict;
use warnings;
use utf8;

my $acpi;
my $status;
my $percent;
my $symbol;
my $color;
my $bat_number = $ENV{BLOCK_INSTANCE} || 0;

my $color_charge = "#22F1FF";
my $color_full = "#00FF00";
my $color_high = "#A8FF00";
my $color_half = "#FFF600";
my $color_low = "#FFAE00";
my $color_empty = "#FF0000";

# read the first line of the "acpi" command output
open (ACPI, "acpi -b | grep 'Battery $bat_number' |") or die;
$acpi = <ACPI>;
close(ACPI);

# fail on unexpected output
if ($acpi !~ /: (\w+), (\d+)%/) {
	die "$acpi\n";
}

$status = $1;
$percent = $2;

# consider color and urgent flag only on discharge
if ($status eq 'Discharging') {

	if ($percent <= 10) {
		my $sec;
		($sec) = localtime;
		if ($sec % 2 eq 0) {
			print "  $percent%";
			exit(33);
		}
		else {
			$symbol="";
			$color=$color_empty;
		}
	} elsif ($percent <= 15) {
		$symbol="";
		$color=$color_empty;
	} elsif ($percent <= 25) {
		$symbol="";
		$color=$color_low;
	} elsif ($percent <= 50) {
		$symbol="";
		$color=$color_half;
	} elsif ($percent <= 75) {
		$symbol="";
		$color=$color_high;
	} else {
		$symbol="";
        $color=$color_full;
    }
    
} else {
    $symbol="";
	$color=$color_charge;
}

#print text
print "$symbol  $percent%\n\n$color\n";

exit(0);
